@model PJCAdmin.Models.Job

@{
    ViewBag.Title = "Job - Details";
}

@if (Roles.IsUserInRole("Administrator") && !(ViewData["mockUser"] as string).Equals(""))
{
    <h1>
        Viewing as: @(ViewData["mockUser"] as string)
    </h1>
    <p>@Html.ActionLink("View as different user","Index")</p>
}

<p>
    @if (Roles.IsUserInRole("Administrator")){
        @Html.ActionLink("View different routine", "ListRoutines", new { mockUser = ViewData["mockUser"] as string })
    }
    else{
        @Html.ActionLink("View different routine", "ListRoutines")
    }
</p>
<p>
    @if (Roles.IsUserInRole("Administrator")){
        @Html.ActionLink("View different version", "ListRoutineVersions", new { 
            mockUser = ViewData["mockUser"] as string,
            routineName = ViewData["routineName"] as string,
            assigneeName = ViewData["assigneeName"] as string})
    }
    else{
        @Html.ActionLink("View different version", "ListRoutineVersions", new { 
            routineName = ViewData["routineName"] as string,
            assigneeName = ViewData["assigneeName"] as string})
    }
</p>

<table>
    <tr>
        <th>Job Title - @Html.DisplayFor(modelItem => Model.Routine.routineTitle)</th>
    </tr>
    <tr>
        <td>
            @if (Roles.IsUserInRole("Administrator"))
            {
                @Html.ActionLink("Delete Job", "Delete", new { 
                    mockUser = ViewData["mockUser"] as string,
                    routineName = Model.Routine.routineTitle,
                    assigneeName = Model.Routine.assigneeUserName,
                    startDate = Model.startTime})
            }
            else
            {
                @Html.ActionLink("Delete Job", "Delete", new {
                    routineName = Model.Routine.routineTitle,
                    assigneeName = Model.Routine.assigneeUserName,
                    startDate = Model.startTime})
            }
        </td>
    </tr>
    @if (Model.Notes.Count > 0)
    {
        <tr>
            <td>
                Has Job Notes <!--TODO ADD view notes link-->
            </td>
        </tr>
    }
    <tr><td>Assigned To: @Html.DisplayFor(modelItem => Model.Routine.assigneeUserName)</td></tr>
    <tr><td>Is Disabled? @Html.DisplayFor(modelItem => Model.Routine.isDisabled)</td></tr>
    <tr><td>Is Timed? @Html.DisplayFor(modelItem => Model.Routine.isTimed)</td></tr>
    <tr><td>Started At: @Html.DisplayFor(modelItem => Model.startTime)</td></tr>
    <tr><td>Ended At: @Html.DisplayFor(modelItem => Model.Steps.Last().endTime)</td></tr>
    <tr><td></td></tr>
    <tr>
        <th></th>
        <th>Routine Info</th>
        <th></th>
        <th>Job Info</th>
    </tr>
    <tr>
        <td>Duration</td>
        <td>Expected: @Html.DisplayFor(modelItem => Model.Routine.expectedDuration)</td>
        <td></td>
        <td>Completed In: @(Model.Steps.Last().endTime - Model.startTime)</td>
    </tr>
    <tr><td></td></tr>
    <tr><th>Steps</th></tr>

    @foreach (PJCAdmin.Models.Step step in Model.Steps)
    {
        PJCAdmin.Models.Task task = Model.Routine.Tasks.Where(t => t.sequenceNo == step.sequenceNo).First();
        
        DateTime? stepStartTime;
        if (step.sequenceNo == 1)
        {
            stepStartTime = Model.startTime;
        }
        else
        {
            stepStartTime = Model.Steps.Where(s => s.sequenceNo == (byte)(step.sequenceNo - 1)).First().endTime;
        }
        <tr>
            <th>
                Name: @Html.DisplayFor(modelItem => task.taskName)
            </th>
        </tr>
        <tr>
            <td>
                Description: @Html.DisplayFor(modelItem => task.taskDescription)
            </td>
        </tr>
        <tr>
            <td>
                Is Timed? @Html.DisplayFor(modelItem => task.isTimed)
            </td>
        </tr>
        <tr>
            <td>
                Started at: @Html.DisplayFor(modelItem => stepStartTime) 
            </td>
        </tr>
        <tr>
            <td>
                Completed at: @Html.DisplayFor(modelItem => step.endTime)
            </td>
        </tr>
        <tr>
            <th></th><th>Routine Info</th>
            <th></th><th>Job Info</th>
        </tr>
        <tr>
            <td>Duration - </td>
            <td>Expected: @Html.DisplayFor(modelItem => task.expectedDuration)</td>
            <td></td>
            <td>Completed In: @(step.endTime - stepStartTime)</td>
        </tr>
        if (step.Notes.Count() > 0)
        {
        <tr>
            <td>
                Has Step Notes <!--TODO add view step notes link -->
            </td>
        </tr>
        }
    }
</table>

