@model PJCAdmin.Models.RoutineModel

@{
    ViewBag.Title = "Edit Routine - Testing";
    //ProfileCommon userProfile = (ProfileCommon)ProfileCommon.Create(Model.UserName, true);
}

@if (Roles.IsUserInRole("Administrator") && !(ViewData["mockUser"] as string).Equals(""))
{
    <h1>
        Viewing as: @(ViewData["mockUser"] as string)
    </h1>
    <p>@Html.ActionLink("View as different user","List")</p>
}
<h2>Edit Routine <small style="color:#808080">@Html.DisplayFor(model => model.routineTitle)</small></h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()

    <fieldset>
        @Html.HiddenFor(m => m.routineTitle)
        <table>
            <tr><td>
                Assigned to: @Html.DisplayFor(model => model.assigneeUserName)
                @Html.HiddenFor(m => m.assigneeUserName)
            </td></tr>
            <tr><td>
                Timed? @Html.CheckBoxFor(m => m.isTimed) - Time Limit: @Html.EditorFor(m => m.expectedDuration)
            </td></tr>
            <tr><td>
                Email on job completion? @Html.CheckBoxFor(m => m.isNotifiable)
            </td></tr>
            <tr><td>
                Disabled? @Html.CheckBoxFor(m => m.isDisabled)
            </td></tr>
        </table>

        <h3>Routine Feedback</h3>
        <ol id="RoutineFeedbacks">
            @{int index = 0;}
            @foreach (PJCAdmin.Models.FeedbackModel feedback in Model.Feedbacks)
            {
                @Html.Partial("_EditRoutineFeedback", feedback, new ViewDataDictionary{{"Index",@index++}});
            }
        </ol>
        <button class="AddFinalRoutineFeedback">Add Routine Feedback</button>

        <h3>Tasks</h3>
        <ol id="Tasks">
            @foreach (PJCAdmin.Models.TaskModel task in Model.Tasks)
            {
                @Html.Partial("_EditTask", task);

            }
        </ol>
       
        <button id="AddFinalTask" class="AddFinalTask">Add Task At End</button>
        <br />
        <input type="submit" value="Save" />
    </fieldset>
}

<script>
    function InsertNewRoutineFeedback(atIndex) {
        if ($("#RoutineFeedbacks li").length > atIndex) {
            $('#RoutineFeedbacks li:eq(' + atIndex + ')').before('@Html.Partial("_NewRoutineFeedback", new PJCAdmin.Models.FeedbackModel())');
        }
        else if ($("#RoutineFeedbacks li").length == atIndex) {
            $("#RoutineFeedbacks").append('@Html.Partial("_NewRoutineFeedback", new PJCAdmin.Models.FeedbackModel())');
        }
        UpdateRoutineFeedbackSequenceNos();
        return false;
    }

    function InsertNewTask(atIndex) {
        if ($("#Tasks li").length > atIndex) {
            $('#Tasks li:eq(' + atIndex + ')').before('@Html.Partial("_NewTask", new PJCAdmin.Models.TaskModel(),ViewData)');
        }
        else if ($("#Tasks li").length == atIndex){
            $("#Tasks").append('@Html.Partial("_NewTask", new PJCAdmin.Models.TaskModel(),ViewData)');
        }
        UpdateTaskSequenceNos();
        return false;
    }

    function InsertNewTaskFeedback(atIndex) {
        if ($("#TaskFeedbacks li").length > atIndex) {
            $('#TaskFeedbacks li:eq(' + atIndex + ')').before('@Html.Partial("_NewTaskFeedback", new PJCAdmin.Models.FeedbackModel())');
        }
        else if ($("#TaskFeedbacks li").length == atIndex) {
            $("#TaskFeedbacks").append('@Html.Partial("_NewTaskFeedback", new PJCAdmin.Models.FeedbackModel())');
        }
        UpdateTaskFeedbackSequenceNos();
        return false;
    }

    function DeleteRoutineFeedback(atIndex) {
        $("#RoutineFeedbacks li").eq(atIndex).remove();
        UpdateRoutineFeedbackSequenceNos();
        return false;
    }

    function DeleteTask(atIndex) {
        if ($("#Tasks li").length == 1) {
            return false;
        }

        $("#Tasks li").eq(atIndex).remove();
        UpdateTaskSequenceNos();
        return false;
    }

    function UpdateRoutineFeedbackSequenceNos() {
        $.each($("#RoutineFeedbacks").find("input"), function (key, input) {
            var myIndex = $("#RoutineFeedbacks").find("input").eq(key).closest("li").index();
            var newName = input.name.replace(/\[\d*\]/, "[" + myIndex + "]");
            $("#RoutineFeedbacks").find("input").eq(key).attr('name', newName);
        });
    }

    function UpdateTaskSequenceNos() {
        $.each($("#Tasks").find("input"), function (key, input) {
            var myIndex = $("#Tasks").find("input").eq(key).closest("li").index();
            var sequenceNo = myIndex + 1;
            var newName = input.name.replace(/\[\d*\]/, "[" + myIndex + "]");
            $("#Tasks").find("input").eq(key).attr('name', newName);

            if ($("#Tasks").find("input").eq(key).hasClass("seqNo")) {
                $("#Tasks").find("input").eq(key).val(sequenceNo);
            }
        });
        $.each($("#Tasks").find("select"), function (key, input) {
            var myIndex = $("#Tasks").find("select").eq(key).closest("li").index();
            var newName = input.name.replace(/\[\d*\]/, "[" + myIndex + "]");
            $("#Tasks").find("select").eq(key).attr('name', newName);
        });
    }

    function UpdateTaskFeedbackSequenceNos() {
        $.each($("#TaskFeedbacks").find("input"), function (key, input) {
            var myIndex = $("#TaskFeedbacks").find("input").eq(key).closest("li").index();
            var newName = input.name.replace(/\[\d*\]/, "[" + myIndex + "]");
            $("#TaskFeedbacks").find("input").eq(key).attr('name', newName);
        });
    }

    $(document).ready( function() {
        //InsertNewTask(0);
        $("#RoutineFeedbacks").on('click', 'button.RemoveRoutineFeedback', function (event) {
            event.preventDefault();
            var currentIndex = $(this).closest('li').index();
            DeleteRoutineFeedback(currentIndex);
        });
        $("#AddFinalRoutineFeedback").on('click', function (event) {
            event.preventDefault();
            var endIndex = $("#RoutineFeedbacks").children().size();
            InsertNewRoutineFeedback(endIndex);
        });
        $("#Tasks").on('click', 'button.AddTask', function (event) {
            event.preventDefault();
            var currentIndex = $(this).closest('li').index();
            InsertNewTask(currentIndex);
        });
        $("#Tasks").on('click', 'button.RemoveTask', function (event) {
            event.preventDefault();
            var currentIndex = $(this).closest('li').index();
            DeleteTask(currentIndex);
        });
        $("#AddFinalTask").on('click', function (event) {
            event.preventDefault();
            var endIndex = $("#Tasks").children().size();
            InsertNewTask(endIndex);
        });
        $("#TaskFeedbacks").on('click', 'button.RemoveTaskFeedback', function (event) {
            event.preventDefault();
            var currentIndex = $(this).closest('li').index();
            DeleteTaskFeedback(currentIndex);
        });
        $(".AddFinalTaskFeedback").on('click', function (event) {
            event.preventDefault();
            var endIndex = $("#TaskFeedbacks").children().size();
            InsertNewTaskFeedback(endIndex);
        });
    });
</script>